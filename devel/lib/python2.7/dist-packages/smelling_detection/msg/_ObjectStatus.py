# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smelling_detection/ObjectStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import smelling_detection.msg

class ObjectStatus(genpy.Message):
  _md5sum = "ec083db445abfdb1937e2845ae57c0ea"
  _type = "smelling_detection/ObjectStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool[] exists
string[] objects
Rectangle[] object_rect

================================================================================
MSG: smelling_detection/Rectangle
int16 x1
int16 y1
int16 x2
int16 y2
"""
  __slots__ = ['exists','objects','object_rect']
  _slot_types = ['bool[]','string[]','smelling_detection/Rectangle[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       exists,objects,object_rect

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.exists is None:
        self.exists = []
      if self.objects is None:
        self.objects = []
      if self.object_rect is None:
        self.object_rect = []
    else:
      self.exists = []
      self.objects = []
      self.object_rect = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.exists)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.exists))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.object_rect)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_rect:
        _x = val1
        buff.write(_get_struct_4h().pack(_x.x1, _x.y1, _x.x2, _x.y2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.object_rect is None:
        self.object_rect = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.exists = struct.unpack(pattern, str[start:end])
      self.exists = map(bool, self.exists)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_rect = []
      for i in range(0, length):
        val1 = smelling_detection.msg.Rectangle()
        _x = val1
        start = end
        end += 8
        (_x.x1, _x.y1, _x.x2, _x.y2,) = _get_struct_4h().unpack(str[start:end])
        self.object_rect.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.exists)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.exists.tostring())
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.object_rect)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_rect:
        _x = val1
        buff.write(_get_struct_4h().pack(_x.x1, _x.y1, _x.x2, _x.y2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.object_rect is None:
        self.object_rect = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.exists = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.exists = map(bool, self.exists)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_rect = []
      for i in range(0, length):
        val1 = smelling_detection.msg.Rectangle()
        _x = val1
        start = end
        end += 8
        (_x.x1, _x.y1, _x.x2, _x.y2,) = _get_struct_4h().unpack(str[start:end])
        self.object_rect.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4h = None
def _get_struct_4h():
    global _struct_4h
    if _struct_4h is None:
        _struct_4h = struct.Struct("<4h")
    return _struct_4h
