# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tfpose_ros/Persons.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tfpose_ros.msg
import std_msgs.msg

class Persons(genpy.Message):
  _md5sum = "599d56444c93fa962e2fbdbd99eb4501"
  _type = "tfpose_ros/Persons"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Person[] persons
uint32 image_w
uint32 image_h
Header header
================================================================================
MSG: tfpose_ros/Person
BodyPartElm[] body_part
================================================================================
MSG: tfpose_ros/BodyPartElm
uint32 part_id
float32 x
float32 y
float32 confidence
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['persons','image_w','image_h','header']
  _slot_types = ['tfpose_ros/Person[]','uint32','uint32','std_msgs/Header']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       persons,image_w,image_h,header

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Persons, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.persons is None:
        self.persons = []
      if self.image_w is None:
        self.image_w = 0
      if self.image_h is None:
        self.image_h = 0
      if self.header is None:
        self.header = std_msgs.msg.Header()
    else:
      self.persons = []
      self.image_w = 0
      self.image_h = 0
      self.header = std_msgs.msg.Header()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.persons)
      buff.write(_struct_I.pack(length))
      for val1 in self.persons:
        length = len(val1.body_part)
        buff.write(_struct_I.pack(length))
        for val2 in val1.body_part:
          _x = val2
          buff.write(_get_struct_I3f().pack(_x.part_id, _x.x, _x.y, _x.confidence))
      _x = self
      buff.write(_get_struct_5I().pack(_x.image_w, _x.image_h, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.persons is None:
        self.persons = None
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.persons = []
      for i in range(0, length):
        val1 = tfpose_ros.msg.Person()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.body_part = []
        for i in range(0, length):
          val2 = tfpose_ros.msg.BodyPartElm()
          _x = val2
          start = end
          end += 16
          (_x.part_id, _x.x, _x.y, _x.confidence,) = _get_struct_I3f().unpack(str[start:end])
          val1.body_part.append(val2)
        self.persons.append(val1)
      _x = self
      start = end
      end += 20
      (_x.image_w, _x.image_h, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.persons)
      buff.write(_struct_I.pack(length))
      for val1 in self.persons:
        length = len(val1.body_part)
        buff.write(_struct_I.pack(length))
        for val2 in val1.body_part:
          _x = val2
          buff.write(_get_struct_I3f().pack(_x.part_id, _x.x, _x.y, _x.confidence))
      _x = self
      buff.write(_get_struct_5I().pack(_x.image_w, _x.image_h, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.persons is None:
        self.persons = None
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.persons = []
      for i in range(0, length):
        val1 = tfpose_ros.msg.Person()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.body_part = []
        for i in range(0, length):
          val2 = tfpose_ros.msg.BodyPartElm()
          _x = val2
          start = end
          end += 16
          (_x.part_id, _x.x, _x.y, _x.confidence,) = _get_struct_I3f().unpack(str[start:end])
          val1.body_part.append(val2)
        self.persons.append(val1)
      _x = self
      start = end
      end += 20
      (_x.image_w, _x.image_h, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5I = None
def _get_struct_5I():
    global _struct_5I
    if _struct_5I is None:
        _struct_5I = struct.Struct("<5I")
    return _struct_5I
_struct_I3f = None
def _get_struct_I3f():
    global _struct_I3f
    if _struct_I3f is None:
        _struct_I3f = struct.Struct("<I3f")
    return _struct_I3f
