// Generated by gencpp from file smelling_detection/ObjectStatus.msg
// DO NOT EDIT!


#ifndef SMELLING_DETECTION_MESSAGE_OBJECTSTATUS_H
#define SMELLING_DETECTION_MESSAGE_OBJECTSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <smelling_detection/Rectangle.h>

namespace smelling_detection
{
template <class ContainerAllocator>
struct ObjectStatus_
{
  typedef ObjectStatus_<ContainerAllocator> Type;

  ObjectStatus_()
    : exists()
    , objects()
    , object_rect()  {
    }
  ObjectStatus_(const ContainerAllocator& _alloc)
    : exists(_alloc)
    , objects(_alloc)
    , object_rect(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _exists_type;
  _exists_type exists;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _objects_type;
  _objects_type objects;

   typedef std::vector< ::smelling_detection::Rectangle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::smelling_detection::Rectangle_<ContainerAllocator> >::other >  _object_rect_type;
  _object_rect_type object_rect;





  typedef boost::shared_ptr< ::smelling_detection::ObjectStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smelling_detection::ObjectStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectStatus_

typedef ::smelling_detection::ObjectStatus_<std::allocator<void> > ObjectStatus;

typedef boost::shared_ptr< ::smelling_detection::ObjectStatus > ObjectStatusPtr;
typedef boost::shared_ptr< ::smelling_detection::ObjectStatus const> ObjectStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smelling_detection::ObjectStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smelling_detection::ObjectStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace smelling_detection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'smelling_detection': ['/home/vision/work/computer_vision_projects/catkin_ws/src/smelling_detection/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::smelling_detection::ObjectStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smelling_detection::ObjectStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smelling_detection::ObjectStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smelling_detection::ObjectStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smelling_detection::ObjectStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smelling_detection::ObjectStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smelling_detection::ObjectStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec083db445abfdb1937e2845ae57c0ea";
  }

  static const char* value(const ::smelling_detection::ObjectStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec083db445abfdb1ULL;
  static const uint64_t static_value2 = 0x937e2845ae57c0eaULL;
};

template<class ContainerAllocator>
struct DataType< ::smelling_detection::ObjectStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smelling_detection/ObjectStatus";
  }

  static const char* value(const ::smelling_detection::ObjectStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smelling_detection::ObjectStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool[] exists\n\
string[] objects\n\
Rectangle[] object_rect\n\
\n\
================================================================================\n\
MSG: smelling_detection/Rectangle\n\
int16 x1\n\
int16 y1\n\
int16 x2\n\
int16 y2\n\
";
  }

  static const char* value(const ::smelling_detection::ObjectStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smelling_detection::ObjectStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.exists);
      stream.next(m.objects);
      stream.next(m.object_rect);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smelling_detection::ObjectStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smelling_detection::ObjectStatus_<ContainerAllocator>& v)
  {
    s << indent << "exists[]" << std::endl;
    for (size_t i = 0; i < v.exists.size(); ++i)
    {
      s << indent << "  exists[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.exists[i]);
    }
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.objects[i]);
    }
    s << indent << "object_rect[]" << std::endl;
    for (size_t i = 0; i < v.object_rect.size(); ++i)
    {
      s << indent << "  object_rect[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::smelling_detection::Rectangle_<ContainerAllocator> >::stream(s, indent + "    ", v.object_rect[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMELLING_DETECTION_MESSAGE_OBJECTSTATUS_H
